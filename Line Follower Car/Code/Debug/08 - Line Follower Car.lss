
08 - Line Follower Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010e6  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070f  00000000  00000000  00001826  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000072f  00000000  00000000  00001f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00002664  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049e  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000506  00000000  00000000  00002c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9a 01 	call	0x334	; 0x334 <main>
  64:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <MOTOR_voidForward>:
#include "../../MCAL/TIM1/TIM1_interface.h"
#include "MOTOR_reg.h" 
#include "MOTOR_interface.h" 


void MOTOR_voidForward(u8 speed){
  6c:	cf 93       	push	r28
  6e:	c8 2f       	mov	r28, r24
	   /* SET PINS DIR  */
	   DIO_voidSetPinDir(EN1_PORT,EN1_PIN,OUTPUT) ; 
  70:	41 e0       	ldi	r20, 0x01	; 1
  72:	64 e0       	ldi	r22, 0x04	; 4
  74:	83 e0       	ldi	r24, 0x03	; 3
  76:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_voidSetPinDir>
	   DIO_voidSetPinDir(EN2_PORT,EN2_PIN,OUTPUT) ; 
  7a:	41 e0       	ldi	r20, 0x01	; 1
  7c:	65 e0       	ldi	r22, 0x05	; 5
  7e:	83 e0       	ldi	r24, 0x03	; 3
  80:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_voidSetPinDir>
	   DIO_voidSetPinDir(IN1_PORT,IN1_PIN,OUTPUT) ; 
  84:	41 e0       	ldi	r20, 0x01	; 1
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	83 e0       	ldi	r24, 0x03	; 3
  8a:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_voidSetPinDir>
	   DIO_voidSetPinDir(IN2_PORT,IN2_PIN,OUTPUT) ; 
  8e:	41 e0       	ldi	r20, 0x01	; 1
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_voidSetPinDir>
	   DIO_voidSetPinDir(IN3_PORT,IN3_PIN,OUTPUT) ; 
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	62 e0       	ldi	r22, 0x02	; 2
  9c:	83 e0       	ldi	r24, 0x03	; 3
  9e:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_voidSetPinDir>
	   DIO_voidSetPinDir(IN4_PORT,IN4_PIN,OUTPUT) ; 
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	63 e0       	ldi	r22, 0x03	; 3
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_voidSetPinDir>
	
	    /* MOTOR Forward */
		 TIMER1_Vid_FastPWM_10bit_res(OC1A,speed) ;
  ac:	6c 2f       	mov	r22, r28
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <TIMER1_Vid_FastPWM_10bit_res>
		 TIMER1_Vid_FastPWM_10bit_res(OC1B,speed) ;
  b4:	6c 2f       	mov	r22, r28
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <TIMER1_Vid_FastPWM_10bit_res>
		DIO_voidSetPinVal(IN1_PORT,IN1_PIN,HIGH) ; 
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_voidSetPinVal>
		DIO_voidSetPinVal(IN2_PORT,IN2_PIN,LOW) ; 
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_voidSetPinVal>
		DIO_voidSetPinVal(IN3_PORT,IN3_PIN,HIGH) ; 
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_voidSetPinVal>
		DIO_voidSetPinVal(IN4_PORT,IN4_PIN,LOW) ; 
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	63 e0       	ldi	r22, 0x03	; 3
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_voidSetPinVal>
	
}
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <DIO_voidSetPinDir>:



void DIO_voidSetPinDir(u8 copy_u8port, u8 copy_u8pin ,u8 copy_u8Dir) {
	
	         if (copy_u8Dir==OUTPUT)
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	a1 f5       	brne	.+104    	; 0x154 <DIO_voidSetPinDir+0x6c>
	         {
				 
				 switch(copy_u8port){
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	89 f0       	breq	.+34     	; 0x112 <DIO_voidSetPinDir+0x2a>
  f0:	28 f0       	brcs	.+10     	; 0xfc <DIO_voidSetPinDir+0x14>
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	c9 f0       	breq	.+50     	; 0x128 <DIO_voidSetPinDir+0x40>
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	11 f1       	breq	.+68     	; 0x13e <DIO_voidSetPinDir+0x56>
  fa:	08 95       	ret
					 
					 case DIO_PORTA : SET_BIT(DDRA_REG,copy_u8pin);break ;
  fc:	2a b3       	in	r18, 0x1a	; 26
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_voidSetPinDir+0x20>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_voidSetPinDir+0x1c>
 10c:	82 2b       	or	r24, r18
 10e:	8a bb       	out	0x1a, r24	; 26
 110:	08 95       	ret
					 case DIO_PORTB : SET_BIT(DDRB_REG,copy_u8pin);break ;
 112:	27 b3       	in	r18, 0x17	; 23
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_voidSetPinDir+0x36>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_voidSetPinDir+0x32>
 122:	82 2b       	or	r24, r18
 124:	87 bb       	out	0x17, r24	; 23
 126:	08 95       	ret
					 case DIO_PORTC : SET_BIT(DDRC_REG,copy_u8pin);break ;
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_voidSetPinDir+0x4c>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_voidSetPinDir+0x48>
 138:	82 2b       	or	r24, r18
 13a:	84 bb       	out	0x14, r24	; 20
 13c:	08 95       	ret
					 case DIO_PORTD : SET_BIT(DDRD_REG,copy_u8pin);break ; 
 13e:	21 b3       	in	r18, 0x11	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_voidSetPinDir+0x62>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_voidSetPinDir+0x5e>
 14e:	82 2b       	or	r24, r18
 150:	81 bb       	out	0x11, r24	; 17
 152:	08 95       	ret
		                            }
			 }
				 else if (copy_u8Dir==INPUT)
 154:	41 11       	cpse	r20, r1
 156:	37 c0       	rjmp	.+110    	; 0x1c6 <DIO_voidSetPinDir+0xde>
				 {
					 switch(copy_u8port){
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	91 f0       	breq	.+36     	; 0x180 <DIO_voidSetPinDir+0x98>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_voidSetPinDir+0x80>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	d9 f0       	breq	.+54     	; 0x198 <DIO_voidSetPinDir+0xb0>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	29 f1       	breq	.+74     	; 0x1b0 <DIO_voidSetPinDir+0xc8>
 166:	08 95       	ret
						 
						 case DIO_PORTA : CLR_BIT(DDRA_REG,copy_u8pin);break ;
 168:	2a b3       	in	r18, 0x1a	; 26
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_voidSetPinDir+0x8c>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_voidSetPinDir+0x88>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	8a bb       	out	0x1a, r24	; 26
 17e:	08 95       	ret
						 case DIO_PORTB : CLR_BIT(DDRB_REG,copy_u8pin);break ;
 180:	27 b3       	in	r18, 0x17	; 23
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_voidSetPinDir+0xa4>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_voidSetPinDir+0xa0>
 190:	80 95       	com	r24
 192:	82 23       	and	r24, r18
 194:	87 bb       	out	0x17, r24	; 23
 196:	08 95       	ret
						 case DIO_PORTC : CLR_BIT(DDRC_REG,copy_u8pin);break ;
 198:	24 b3       	in	r18, 0x14	; 20
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_voidSetPinDir+0xbc>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_voidSetPinDir+0xb8>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	84 bb       	out	0x14, r24	; 20
 1ae:	08 95       	ret
						 case DIO_PORTD : CLR_BIT(DDRD_REG,copy_u8pin);break ;
 1b0:	21 b3       	in	r18, 0x11	; 17
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_voidSetPinDir+0xd4>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_voidSetPinDir+0xd0>
 1c0:	80 95       	com	r24
 1c2:	82 23       	and	r24, r18
 1c4:	81 bb       	out	0x11, r24	; 17
 1c6:	08 95       	ret

000001c8 <DIO_voidSetPinVal>:
	          
}

void DIO_voidSetPinVal(u8 copy_u8port, u8 copy_u8pin ,u8 copy_u8val){
	
	           if (copy_u8val ==HIGH)
 1c8:	41 30       	cpi	r20, 0x01	; 1
 1ca:	a1 f5       	brne	.+104    	; 0x234 <DIO_voidSetPinVal+0x6c>
	           {
				   switch(copy_u8port){
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	89 f0       	breq	.+34     	; 0x1f2 <DIO_voidSetPinVal+0x2a>
 1d0:	28 f0       	brcs	.+10     	; 0x1dc <DIO_voidSetPinVal+0x14>
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	c9 f0       	breq	.+50     	; 0x208 <DIO_voidSetPinVal+0x40>
 1d6:	83 30       	cpi	r24, 0x03	; 3
 1d8:	11 f1       	breq	.+68     	; 0x21e <DIO_voidSetPinVal+0x56>
 1da:	08 95       	ret
				   
				   case DIO_PORTA : SET_BIT(PORTA_REG,copy_u8pin) ;break;
 1dc:	2b b3       	in	r18, 0x1b	; 27
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_voidSetPinVal+0x20>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_voidSetPinVal+0x1c>
 1ec:	82 2b       	or	r24, r18
 1ee:	8b bb       	out	0x1b, r24	; 27
 1f0:	08 95       	ret
				   case DIO_PORTB : SET_BIT(PORTB_REG,copy_u8pin) ;break;
 1f2:	28 b3       	in	r18, 0x18	; 24
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_voidSetPinVal+0x36>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_voidSetPinVal+0x32>
 202:	82 2b       	or	r24, r18
 204:	88 bb       	out	0x18, r24	; 24
 206:	08 95       	ret
				   case DIO_PORTC : SET_BIT(PORTC_REG,copy_u8pin) ;break;
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_voidSetPinVal+0x4c>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_voidSetPinVal+0x48>
 218:	82 2b       	or	r24, r18
 21a:	85 bb       	out	0x15, r24	; 21
 21c:	08 95       	ret
				   case DIO_PORTD : SET_BIT(PORTD_REG,copy_u8pin) ;break;
 21e:	22 b3       	in	r18, 0x12	; 18
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_voidSetPinVal+0x62>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_voidSetPinVal+0x5e>
 22e:	82 2b       	or	r24, r18
 230:	82 bb       	out	0x12, r24	; 18
 232:	08 95       	ret
   
				   }
		
	           }
	       else if (copy_u8val==LOW)
 234:	41 11       	cpse	r20, r1
 236:	37 c0       	rjmp	.+110    	; 0x2a6 <DIO_voidSetPinVal+0xde>
	       {
			   
			    switch(copy_u8port){
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	91 f0       	breq	.+36     	; 0x260 <DIO_voidSetPinVal+0x98>
 23c:	28 f0       	brcs	.+10     	; 0x248 <DIO_voidSetPinVal+0x80>
 23e:	82 30       	cpi	r24, 0x02	; 2
 240:	d9 f0       	breq	.+54     	; 0x278 <DIO_voidSetPinVal+0xb0>
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	29 f1       	breq	.+74     	; 0x290 <DIO_voidSetPinVal+0xc8>
 246:	08 95       	ret
				    
				    case DIO_PORTA : CLR_BIT(PORTA_REG,copy_u8pin) ;break;
 248:	2b b3       	in	r18, 0x1b	; 27
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_voidSetPinVal+0x8c>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_voidSetPinVal+0x88>
 258:	80 95       	com	r24
 25a:	82 23       	and	r24, r18
 25c:	8b bb       	out	0x1b, r24	; 27
 25e:	08 95       	ret
				    case DIO_PORTB : CLR_BIT(PORTB_REG,copy_u8pin) ;break;
 260:	28 b3       	in	r18, 0x18	; 24
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_voidSetPinVal+0xa4>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_voidSetPinVal+0xa0>
 270:	80 95       	com	r24
 272:	82 23       	and	r24, r18
 274:	88 bb       	out	0x18, r24	; 24
 276:	08 95       	ret
				    case DIO_PORTC : CLR_BIT(PORTC_REG,copy_u8pin) ;break;
 278:	25 b3       	in	r18, 0x15	; 21
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_voidSetPinVal+0xbc>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_voidSetPinVal+0xb8>
 288:	80 95       	com	r24
 28a:	82 23       	and	r24, r18
 28c:	85 bb       	out	0x15, r24	; 21
 28e:	08 95       	ret
				    case DIO_PORTD : CLR_BIT(PORTD_REG,copy_u8pin) ;break;
 290:	22 b3       	in	r18, 0x12	; 18
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_voidSetPinVal+0xd4>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_voidSetPinVal+0xd0>
 2a0:	80 95       	com	r24
 2a2:	82 23       	and	r24, r18
 2a4:	82 bb       	out	0x12, r24	; 18
 2a6:	08 95       	ret

000002a8 <TIMER1_Vid_FastPWM_10bit_res>:
}

void TIMER1_Vid_FastPWM_10bit_res(u8 copy_u8_pin , u8 copy_u8_duty){
	
	/* select fast pwm 10bit resolution  */
	    SET_BIT(TCCR1A_REG,0) ; 
 2a8:	9f b5       	in	r25, 0x2f	; 47
 2aa:	91 60       	ori	r25, 0x01	; 1
 2ac:	9f bd       	out	0x2f, r25	; 47
	    SET_BIT(TCCR1A_REG,1) ; 
 2ae:	9f b5       	in	r25, 0x2f	; 47
 2b0:	92 60       	ori	r25, 0x02	; 2
 2b2:	9f bd       	out	0x2f, r25	; 47
		SET_BIT(TCCR1B_REG,3) ;
 2b4:	9e b5       	in	r25, 0x2e	; 46
 2b6:	98 60       	ori	r25, 0x08	; 8
 2b8:	9e bd       	out	0x2e, r25	; 46
		CLR_BIT(TCCR1B_REG,4) ; 
 2ba:	9e b5       	in	r25, 0x2e	; 46
 2bc:	9f 7e       	andi	r25, 0xEF	; 239
 2be:	9e bd       	out	0x2e, r25	; 46
   /* select prescaler : 8 */		
	CLR_BIT(TCCR1B_REG,0) ;
 2c0:	9e b5       	in	r25, 0x2e	; 46
 2c2:	9e 7f       	andi	r25, 0xFE	; 254
 2c4:	9e bd       	out	0x2e, r25	; 46
	SET_BIT(TCCR1B_REG,1) ;
 2c6:	9e b5       	in	r25, 0x2e	; 46
 2c8:	92 60       	ori	r25, 0x02	; 2
 2ca:	9e bd       	out	0x2e, r25	; 46
	CLR_BIT(TCCR1B_REG,2) ;
 2cc:	9e b5       	in	r25, 0x2e	; 46
 2ce:	9b 7f       	andi	r25, 0xFB	; 251
 2d0:	9e bd       	out	0x2e, r25	; 46
	switch(copy_u8_pin){
 2d2:	88 23       	and	r24, r24
 2d4:	19 f0       	breq	.+6      	; 0x2dc <TIMER1_Vid_FastPWM_10bit_res+0x34>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	b9 f0       	breq	.+46     	; 0x308 <TIMER1_Vid_FastPWM_10bit_res+0x60>
 2da:	08 95       	ret
		
		case OC1A:   
		           /* FAST PWM non inverting mode */
				   SET_BIT(TCCR1A_REG,7) ; 
 2dc:	8f b5       	in	r24, 0x2f	; 47
 2de:	80 68       	ori	r24, 0x80	; 128
 2e0:	8f bd       	out	0x2f, r24	; 47
				   CLR_BIT(TCCR1A_REG,6) ; 
 2e2:	8f b5       	in	r24, 0x2f	; 47
 2e4:	8f 7b       	andi	r24, 0xBF	; 191
 2e6:	8f bd       	out	0x2f, r24	; 47
				   OCR1A_REG=(f32)copy_u8_duty * 10.23 ;
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__floatunsisf>
 2f2:	24 e1       	ldi	r18, 0x14	; 20
 2f4:	3e ea       	ldi	r19, 0xAE	; 174
 2f6:	43 e2       	ldi	r20, 0x23	; 35
 2f8:	51 e4       	ldi	r21, 0x41	; 65
 2fa:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
 2fe:	0e 94 a8 01 	call	0x350	; 0x350 <__fixunssfsi>
 302:	7b bd       	out	0x2b, r23	; 43
 304:	6a bd       	out	0x2a, r22	; 42
				   break ;  
 306:	08 95       	ret
		case OC1B: 
		        /* FAST PWM non inverting mode */
		        SET_BIT(TCCR1A_REG,5) ;
 308:	8f b5       	in	r24, 0x2f	; 47
 30a:	80 62       	ori	r24, 0x20	; 32
 30c:	8f bd       	out	0x2f, r24	; 47
		        CLR_BIT(TCCR1A_REG,4) ;
 30e:	8f b5       	in	r24, 0x2f	; 47
 310:	8f 7e       	andi	r24, 0xEF	; 239
 312:	8f bd       	out	0x2f, r24	; 47
		        OCR1B_REG=(f32)copy_u8_duty * 10.23 ;
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__floatunsisf>
 31e:	24 e1       	ldi	r18, 0x14	; 20
 320:	3e ea       	ldi	r19, 0xAE	; 174
 322:	43 e2       	ldi	r20, 0x23	; 35
 324:	51 e4       	ldi	r21, 0x41	; 65
 326:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
 32a:	0e 94 a8 01 	call	0x350	; 0x350 <__fixunssfsi>
 32e:	79 bd       	out	0x29, r23	; 41
 330:	68 bd       	out	0x28, r22	; 40
 332:	08 95       	ret

00000334 <main>:
#include "HAL/MOTOR/MOTOR_interface.h"
#include "HAL/MOTOR/MOTOR_reg.h"

int main(void)
{
    DIO_voidSetPinDir(DIO_PORTA, DIO_PIN0, INPUT);
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_voidSetPinDir>
    DIO_voidSetPinDir(DIO_PORTA, DIO_PIN1, INPUT);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_voidSetPinDir>

    while (1)
    {
        if (GET_BIT(DIO_PORTA, DIO_PIN0) == 0 && GET_BIT(DIO_PORTA, DIO_PIN1) == 0) // Move Forward
        {
            MOTOR_voidForward(80);
 348:	80 e5       	ldi	r24, 0x50	; 80
 34a:	0e 94 36 00 	call	0x6c	; 0x6c <MOTOR_voidForward>
 34e:	fc cf       	rjmp	.-8      	; 0x348 <main+0x14>

00000350 <__fixunssfsi>:
 350:	0e 94 1c 02 	call	0x438	; 0x438 <__fp_splitA>
 354:	88 f0       	brcs	.+34     	; 0x378 <__fixunssfsi+0x28>
 356:	9f 57       	subi	r25, 0x7F	; 127
 358:	98 f0       	brcs	.+38     	; 0x380 <__fixunssfsi+0x30>
 35a:	b9 2f       	mov	r27, r25
 35c:	99 27       	eor	r25, r25
 35e:	b7 51       	subi	r27, 0x17	; 23
 360:	b0 f0       	brcs	.+44     	; 0x38e <__fixunssfsi+0x3e>
 362:	e1 f0       	breq	.+56     	; 0x39c <__fixunssfsi+0x4c>
 364:	66 0f       	add	r22, r22
 366:	77 1f       	adc	r23, r23
 368:	88 1f       	adc	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	1a f0       	brmi	.+6      	; 0x374 <__fixunssfsi+0x24>
 36e:	ba 95       	dec	r27
 370:	c9 f7       	brne	.-14     	; 0x364 <__fixunssfsi+0x14>
 372:	14 c0       	rjmp	.+40     	; 0x39c <__fixunssfsi+0x4c>
 374:	b1 30       	cpi	r27, 0x01	; 1
 376:	91 f0       	breq	.+36     	; 0x39c <__fixunssfsi+0x4c>
 378:	0e 94 36 02 	call	0x46c	; 0x46c <__fp_zero>
 37c:	b1 e0       	ldi	r27, 0x01	; 1
 37e:	08 95       	ret
 380:	0c 94 36 02 	jmp	0x46c	; 0x46c <__fp_zero>
 384:	67 2f       	mov	r22, r23
 386:	78 2f       	mov	r23, r24
 388:	88 27       	eor	r24, r24
 38a:	b8 5f       	subi	r27, 0xF8	; 248
 38c:	39 f0       	breq	.+14     	; 0x39c <__fixunssfsi+0x4c>
 38e:	b9 3f       	cpi	r27, 0xF9	; 249
 390:	cc f3       	brlt	.-14     	; 0x384 <__fixunssfsi+0x34>
 392:	86 95       	lsr	r24
 394:	77 95       	ror	r23
 396:	67 95       	ror	r22
 398:	b3 95       	inc	r27
 39a:	d9 f7       	brne	.-10     	; 0x392 <__fixunssfsi+0x42>
 39c:	3e f4       	brtc	.+14     	; 0x3ac <__fixunssfsi+0x5c>
 39e:	90 95       	com	r25
 3a0:	80 95       	com	r24
 3a2:	70 95       	com	r23
 3a4:	61 95       	neg	r22
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	8f 4f       	sbci	r24, 0xFF	; 255
 3aa:	9f 4f       	sbci	r25, 0xFF	; 255
 3ac:	08 95       	ret

000003ae <__floatunsisf>:
 3ae:	e8 94       	clt
 3b0:	09 c0       	rjmp	.+18     	; 0x3c4 <__floatsisf+0x12>

000003b2 <__floatsisf>:
 3b2:	97 fb       	bst	r25, 7
 3b4:	3e f4       	brtc	.+14     	; 0x3c4 <__floatsisf+0x12>
 3b6:	90 95       	com	r25
 3b8:	80 95       	com	r24
 3ba:	70 95       	com	r23
 3bc:	61 95       	neg	r22
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	8f 4f       	sbci	r24, 0xFF	; 255
 3c2:	9f 4f       	sbci	r25, 0xFF	; 255
 3c4:	99 23       	and	r25, r25
 3c6:	a9 f0       	breq	.+42     	; 0x3f2 <__floatsisf+0x40>
 3c8:	f9 2f       	mov	r31, r25
 3ca:	96 e9       	ldi	r25, 0x96	; 150
 3cc:	bb 27       	eor	r27, r27
 3ce:	93 95       	inc	r25
 3d0:	f6 95       	lsr	r31
 3d2:	87 95       	ror	r24
 3d4:	77 95       	ror	r23
 3d6:	67 95       	ror	r22
 3d8:	b7 95       	ror	r27
 3da:	f1 11       	cpse	r31, r1
 3dc:	f8 cf       	rjmp	.-16     	; 0x3ce <__floatsisf+0x1c>
 3de:	fa f4       	brpl	.+62     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3e0:	bb 0f       	add	r27, r27
 3e2:	11 f4       	brne	.+4      	; 0x3e8 <__floatsisf+0x36>
 3e4:	60 ff       	sbrs	r22, 0
 3e6:	1b c0       	rjmp	.+54     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3e8:	6f 5f       	subi	r22, 0xFF	; 255
 3ea:	7f 4f       	sbci	r23, 0xFF	; 255
 3ec:	8f 4f       	sbci	r24, 0xFF	; 255
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	16 c0       	rjmp	.+44     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3f2:	88 23       	and	r24, r24
 3f4:	11 f0       	breq	.+4      	; 0x3fa <__floatsisf+0x48>
 3f6:	96 e9       	ldi	r25, 0x96	; 150
 3f8:	11 c0       	rjmp	.+34     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3fa:	77 23       	and	r23, r23
 3fc:	21 f0       	breq	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fe:	9e e8       	ldi	r25, 0x8E	; 142
 400:	87 2f       	mov	r24, r23
 402:	76 2f       	mov	r23, r22
 404:	05 c0       	rjmp	.+10     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 406:	66 23       	and	r22, r22
 408:	71 f0       	breq	.+28     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 40a:	96 e8       	ldi	r25, 0x86	; 134
 40c:	86 2f       	mov	r24, r22
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	2a f0       	brmi	.+10     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 414:	9a 95       	dec	r25
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	88 1f       	adc	r24, r24
 41c:	da f7       	brpl	.-10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41e:	88 0f       	add	r24, r24
 420:	96 95       	lsr	r25
 422:	87 95       	ror	r24
 424:	97 f9       	bld	r25, 7
 426:	08 95       	ret

00000428 <__fp_split3>:
 428:	57 fd       	sbrc	r21, 7
 42a:	90 58       	subi	r25, 0x80	; 128
 42c:	44 0f       	add	r20, r20
 42e:	55 1f       	adc	r21, r21
 430:	59 f0       	breq	.+22     	; 0x448 <__fp_splitA+0x10>
 432:	5f 3f       	cpi	r21, 0xFF	; 255
 434:	71 f0       	breq	.+28     	; 0x452 <__fp_splitA+0x1a>
 436:	47 95       	ror	r20

00000438 <__fp_splitA>:
 438:	88 0f       	add	r24, r24
 43a:	97 fb       	bst	r25, 7
 43c:	99 1f       	adc	r25, r25
 43e:	61 f0       	breq	.+24     	; 0x458 <__fp_splitA+0x20>
 440:	9f 3f       	cpi	r25, 0xFF	; 255
 442:	79 f0       	breq	.+30     	; 0x462 <__fp_splitA+0x2a>
 444:	87 95       	ror	r24
 446:	08 95       	ret
 448:	12 16       	cp	r1, r18
 44a:	13 06       	cpc	r1, r19
 44c:	14 06       	cpc	r1, r20
 44e:	55 1f       	adc	r21, r21
 450:	f2 cf       	rjmp	.-28     	; 0x436 <__fp_split3+0xe>
 452:	46 95       	lsr	r20
 454:	f1 df       	rcall	.-30     	; 0x438 <__fp_splitA>
 456:	08 c0       	rjmp	.+16     	; 0x468 <__fp_splitA+0x30>
 458:	16 16       	cp	r1, r22
 45a:	17 06       	cpc	r1, r23
 45c:	18 06       	cpc	r1, r24
 45e:	99 1f       	adc	r25, r25
 460:	f1 cf       	rjmp	.-30     	; 0x444 <__fp_splitA+0xc>
 462:	86 95       	lsr	r24
 464:	71 05       	cpc	r23, r1
 466:	61 05       	cpc	r22, r1
 468:	08 94       	sec
 46a:	08 95       	ret

0000046c <__fp_zero>:
 46c:	e8 94       	clt

0000046e <__fp_szero>:
 46e:	bb 27       	eor	r27, r27
 470:	66 27       	eor	r22, r22
 472:	77 27       	eor	r23, r23
 474:	cb 01       	movw	r24, r22
 476:	97 f9       	bld	r25, 7
 478:	08 95       	ret

0000047a <__mulsf3>:
 47a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__mulsf3x>
 47e:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_round>
 482:	0e 94 b3 02 	call	0x566	; 0x566 <__fp_pscA>
 486:	38 f0       	brcs	.+14     	; 0x496 <__mulsf3+0x1c>
 488:	0e 94 ba 02 	call	0x574	; 0x574 <__fp_pscB>
 48c:	20 f0       	brcs	.+8      	; 0x496 <__mulsf3+0x1c>
 48e:	95 23       	and	r25, r21
 490:	11 f0       	breq	.+4      	; 0x496 <__mulsf3+0x1c>
 492:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_inf>
 496:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_nan>
 49a:	11 24       	eor	r1, r1
 49c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__fp_szero>

000004a0 <__mulsf3x>:
 4a0:	0e 94 14 02 	call	0x428	; 0x428 <__fp_split3>
 4a4:	70 f3       	brcs	.-36     	; 0x482 <__mulsf3+0x8>

000004a6 <__mulsf3_pse>:
 4a6:	95 9f       	mul	r25, r21
 4a8:	c1 f3       	breq	.-16     	; 0x49a <__mulsf3+0x20>
 4aa:	95 0f       	add	r25, r21
 4ac:	50 e0       	ldi	r21, 0x00	; 0
 4ae:	55 1f       	adc	r21, r21
 4b0:	62 9f       	mul	r22, r18
 4b2:	f0 01       	movw	r30, r0
 4b4:	72 9f       	mul	r23, r18
 4b6:	bb 27       	eor	r27, r27
 4b8:	f0 0d       	add	r31, r0
 4ba:	b1 1d       	adc	r27, r1
 4bc:	63 9f       	mul	r22, r19
 4be:	aa 27       	eor	r26, r26
 4c0:	f0 0d       	add	r31, r0
 4c2:	b1 1d       	adc	r27, r1
 4c4:	aa 1f       	adc	r26, r26
 4c6:	64 9f       	mul	r22, r20
 4c8:	66 27       	eor	r22, r22
 4ca:	b0 0d       	add	r27, r0
 4cc:	a1 1d       	adc	r26, r1
 4ce:	66 1f       	adc	r22, r22
 4d0:	82 9f       	mul	r24, r18
 4d2:	22 27       	eor	r18, r18
 4d4:	b0 0d       	add	r27, r0
 4d6:	a1 1d       	adc	r26, r1
 4d8:	62 1f       	adc	r22, r18
 4da:	73 9f       	mul	r23, r19
 4dc:	b0 0d       	add	r27, r0
 4de:	a1 1d       	adc	r26, r1
 4e0:	62 1f       	adc	r22, r18
 4e2:	83 9f       	mul	r24, r19
 4e4:	a0 0d       	add	r26, r0
 4e6:	61 1d       	adc	r22, r1
 4e8:	22 1f       	adc	r18, r18
 4ea:	74 9f       	mul	r23, r20
 4ec:	33 27       	eor	r19, r19
 4ee:	a0 0d       	add	r26, r0
 4f0:	61 1d       	adc	r22, r1
 4f2:	23 1f       	adc	r18, r19
 4f4:	84 9f       	mul	r24, r20
 4f6:	60 0d       	add	r22, r0
 4f8:	21 1d       	adc	r18, r1
 4fa:	82 2f       	mov	r24, r18
 4fc:	76 2f       	mov	r23, r22
 4fe:	6a 2f       	mov	r22, r26
 500:	11 24       	eor	r1, r1
 502:	9f 57       	subi	r25, 0x7F	; 127
 504:	50 40       	sbci	r21, 0x00	; 0
 506:	9a f0       	brmi	.+38     	; 0x52e <__mulsf3_pse+0x88>
 508:	f1 f0       	breq	.+60     	; 0x546 <__mulsf3_pse+0xa0>
 50a:	88 23       	and	r24, r24
 50c:	4a f0       	brmi	.+18     	; 0x520 <__mulsf3_pse+0x7a>
 50e:	ee 0f       	add	r30, r30
 510:	ff 1f       	adc	r31, r31
 512:	bb 1f       	adc	r27, r27
 514:	66 1f       	adc	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	88 1f       	adc	r24, r24
 51a:	91 50       	subi	r25, 0x01	; 1
 51c:	50 40       	sbci	r21, 0x00	; 0
 51e:	a9 f7       	brne	.-22     	; 0x50a <__mulsf3_pse+0x64>
 520:	9e 3f       	cpi	r25, 0xFE	; 254
 522:	51 05       	cpc	r21, r1
 524:	80 f0       	brcs	.+32     	; 0x546 <__mulsf3_pse+0xa0>
 526:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_inf>
 52a:	0c 94 37 02 	jmp	0x46e	; 0x46e <__fp_szero>
 52e:	5f 3f       	cpi	r21, 0xFF	; 255
 530:	e4 f3       	brlt	.-8      	; 0x52a <__mulsf3_pse+0x84>
 532:	98 3e       	cpi	r25, 0xE8	; 232
 534:	d4 f3       	brlt	.-12     	; 0x52a <__mulsf3_pse+0x84>
 536:	86 95       	lsr	r24
 538:	77 95       	ror	r23
 53a:	67 95       	ror	r22
 53c:	b7 95       	ror	r27
 53e:	f7 95       	ror	r31
 540:	e7 95       	ror	r30
 542:	9f 5f       	subi	r25, 0xFF	; 255
 544:	c1 f7       	brne	.-16     	; 0x536 <__mulsf3_pse+0x90>
 546:	fe 2b       	or	r31, r30
 548:	88 0f       	add	r24, r24
 54a:	91 1d       	adc	r25, r1
 54c:	96 95       	lsr	r25
 54e:	87 95       	ror	r24
 550:	97 f9       	bld	r25, 7
 552:	08 95       	ret

00000554 <__fp_inf>:
 554:	97 f9       	bld	r25, 7
 556:	9f 67       	ori	r25, 0x7F	; 127
 558:	80 e8       	ldi	r24, 0x80	; 128
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	08 95       	ret

00000560 <__fp_nan>:
 560:	9f ef       	ldi	r25, 0xFF	; 255
 562:	80 ec       	ldi	r24, 0xC0	; 192
 564:	08 95       	ret

00000566 <__fp_pscA>:
 566:	00 24       	eor	r0, r0
 568:	0a 94       	dec	r0
 56a:	16 16       	cp	r1, r22
 56c:	17 06       	cpc	r1, r23
 56e:	18 06       	cpc	r1, r24
 570:	09 06       	cpc	r0, r25
 572:	08 95       	ret

00000574 <__fp_pscB>:
 574:	00 24       	eor	r0, r0
 576:	0a 94       	dec	r0
 578:	12 16       	cp	r1, r18
 57a:	13 06       	cpc	r1, r19
 57c:	14 06       	cpc	r1, r20
 57e:	05 06       	cpc	r0, r21
 580:	08 95       	ret

00000582 <__fp_round>:
 582:	09 2e       	mov	r0, r25
 584:	03 94       	inc	r0
 586:	00 0c       	add	r0, r0
 588:	11 f4       	brne	.+4      	; 0x58e <__fp_round+0xc>
 58a:	88 23       	and	r24, r24
 58c:	52 f0       	brmi	.+20     	; 0x5a2 <__fp_round+0x20>
 58e:	bb 0f       	add	r27, r27
 590:	40 f4       	brcc	.+16     	; 0x5a2 <__fp_round+0x20>
 592:	bf 2b       	or	r27, r31
 594:	11 f4       	brne	.+4      	; 0x59a <__fp_round+0x18>
 596:	60 ff       	sbrs	r22, 0
 598:	04 c0       	rjmp	.+8      	; 0x5a2 <__fp_round+0x20>
 59a:	6f 5f       	subi	r22, 0xFF	; 255
 59c:	7f 4f       	sbci	r23, 0xFF	; 255
 59e:	8f 4f       	sbci	r24, 0xFF	; 255
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	08 95       	ret

000005a4 <_exit>:
 5a4:	f8 94       	cli

000005a6 <__stop_program>:
 5a6:	ff cf       	rjmp	.-2      	; 0x5a6 <__stop_program>
